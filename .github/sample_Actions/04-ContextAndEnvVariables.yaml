# Within the GitHub Actions workflow, there are several default environment variables that are available for you to use, but only within the runner (after the 'step' node) that's executing a job
# These default variables are case-sensitive, and they refer to configuration values for the system and for the current user. 
# We recommend that you use these default environment variables to reference the filesystem rather than using hard-coded file paths. To use a default environment variable, specify $ followed by the environment variable's name.
# Contexts and default variables are similar in that they both provide access to environment information, but they have some important differences. While default environment variables can only be used within the runner, context variables can be used at any point within the workflow.
# Similar to using default environment variables, you can use custom environment variables in your workflow file.

# When building out a workflow, you'll often find the need to reuse the same outputs or download dependencies from one run to another. 
# Instead of downloading these dependencies over and over again, you can cache them to make your workflow run faster and more efficiently. 
# This can dramatically reduce the time it takes to run certain steps in a workflow, because jobs on GitHub-hosted runners start in a clean virtual environment each time. 
# Caching dependencies will help speed up the time it takes to recreate these dependency files.
# To cache dependencies for a job, use GitHub's cache action. This action retrieves a cache identified by a unique key that you provide. 
# When the action finds the cache, it then retrieves the cached files to the path that you configure. To use the cache action, you'll need to set a few specific parameters:

# s/n  Parameter-------->Description-------------------------------------------------------------------------->Required
# 1    Key	            Refers to the key identifier created when saving and searching for a cache.	            Yes
# 2    Path	            Refers to the file path on the runner to cache or search.	                              Yes
# 3    Restore-keys	Consists of alternative existing keys to caches if the desired cache key isn't found.	      No

# In the below example, the path is set to ~/.npm and the key includes the runner's operating system and the SHA-256 hash of the package-lock.json file. 
# Prefixing the key with an ID (npm-cache in this example) is useful when you're using the restore-keys fallback and have multiple caches.

# Similar to the idea of caching dependencies within your workflow, you can pass data between jobs within the same workflow. 
# You can do this by using the upload-artifact and download-artifact actions. Jobs that are dependent on a previous job's artifacts must wait for the previous job to complete successfully before they can run. 
# This is useful if you have a series of jobs that need to run sequentially based on artifacts uploaded from a previous job. For example, job_2 requires upload-job by using the needs: download-job syntax.
# It uses the actions/upload-artifact@v2 action to upload this artifact and store the data for future use within the workflow.
# And then uses the actions/download-artifact@v2 action to download that artifact, and then print the contents of file.txt

# ## ***Enable step debug logging in a workflow *** ##
# In some cases, the default workflow logs won't provide enough detail to diagnose why a specific workflow run, job, or step has failed. For these situations, you can enable additional debug logging for two options: runs and steps. 
# Enable this diagnostic logging by setting two repository secrets that require admin access to the repository to true:

# 1. To enable runner diagnostic logging, set the ACTIONS_RUNNER_DEBUG secret in the repository that contains the workflow to true.
# 2. To enable step diagnostic logging, set the ACTIONS_STEP_DEBUG secret in the repository that contains the workflow to true.

# ## *** Access the workflow logs from the REST API *** ###
# GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs

name: CI
on: push
jobs:

  prod-environment-variable:
    steps:
      # Environment variable $GITHUB_REF
      - run: echo "Deploying to production server on branch $GITHUB_REF"
      
    prod-context-variable:
      # Context variable github.ref
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - run: echo "Deploying to production server on branch $GITHUB_REF"
  
    prod-custom-variable:
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - run: echo "Nice work, $First_Name. Deploying to production server on branch $GITHUB_REF"
          # custom variable First_Name definition
          env:
            First_Name: Mona
            
    run-command-installs:
      steps:
        - run: npm install -g bats          
        
    run-command-runs-custom-script:
      steps:
        - name: Run build script
          run: ./.github/scripts/build.sh        
          shell: bash

    clone-repo-and-cache-dependencies:
      steps:
        - name: Checkout repo
          uses: actions/checkout@v2
      
        - name: Cache NPM dependencies
          uses: actions/cache@v2
          with:
            path: ~/.npm
            key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-npm-cache-

    upload-job:
      name: Upload File
      runs-on: ubuntu-latest
      steps:
        - run: echo "Hello World" > file.txt
        - uses: actions/upload-artifact@v2
          with:
            name: file
            path: file.txt
  
    download-job:
      name: Download File
      runs-on: ubuntu-latest
      needs: upload-job
      steps:
        - uses: actions/download-artifact@v2
          with:
            name: file
        - run: cat file.txt            
  
  
  
  
  
  
  
  
            
          
